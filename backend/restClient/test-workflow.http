### Complete Test Workflow for SendIT API

# Base URL
@baseUrl = http://localhost:3000

# Variables - These will be updated with actual tokens
@customerToken = your-customer-token-here
@driverToken = your-driver-token-here
@adminToken = your-admin-token-here

### ========================================
### STEP 1: AUTHENTICATION SETUP
### ========================================

### 1.1 Register a customer
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "testcustomer@example.com",
  "password": "password123",
  "name": "Test Customer",
  "phone": "+1234567890",
  "address": "123 Test St, Test City, TS",
  "role": "CUSTOMER"
}

### 1.2 Register a driver
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "testdriver@example.com",
  "password": "password123",
  "name": "Test Driver",
  "phone": "+1234567891",
  "address": "456 Driver St, Test City, TS",
  "role": "DRIVER",
  "licenseNumber": "DL123456789",
  "vehicleNumber": "VH789456",
  "vehicleType": "CAR"
}

### 1.3 Register an admin
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "testadmin@example.com",
  "password": "password123",
  "name": "Test Admin",
  "phone": "+1234567892",
  "address": "789 Admin Ave, Test City, TS",
  "role": "ADMIN"
}

### 1.4 Login as customer
# @name customerLogin
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testcustomer@example.com",
  "password": "password123"
}

### 1.5 Login as driver
# @name driverLogin
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testdriver@example.com",
  "password": "password123"
}

### 1.6 Login as admin
# @name adminLogin
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testadmin@example.com",
  "password": "password123"
}

### ========================================
### STEP 2: USER MANAGEMENT TESTING
### ========================================

### 2.1 Get current user profile (Customer)
GET {{baseUrl}}/users/profile/me
Authorization: Bearer {{customerToken}}

### 2.2 Get current user profile (Driver)
GET {{baseUrl}}/users/profile/me
Authorization: Bearer {{driverToken}}

### 2.3 Get current user profile (Admin)
GET {{baseUrl}}/users/profile/me
Authorization: Bearer {{adminToken}}

### 2.4 Get all users (Admin only)
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

### 2.5 Update own profile (Customer)
PATCH {{baseUrl}}/users/user-id-here
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
  "name": "Updated Test Customer",
  "phone": "+1234567899"
}

### ========================================
### STEP 3: PARCEL MANAGEMENT TESTING
### ========================================

### 3.1 Create a new parcel (Customer)
POST {{baseUrl}}/parcels
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
  "senderName": "Test Customer",
  "senderEmail": "testcustomer@example.com",
  "senderPhone": "+1234567890",
  "recipientName": "Test Recipient",
  "recipientEmail": "recipient@example.com",
  "recipientPhone": "+1234567891",
  "pickupAddress": "123 Pickup St, Test City, TS",
  "deliveryAddress": "456 Delivery Ave, Test City, TS",
  "weight": 2.5,
  "description": "Test parcel for delivery",
  "value": 100.00,
  "deliveryInstructions": "Handle with care",
  "priority": "STANDARD"
}

### 3.2 Get my parcels (Customer)
GET {{baseUrl}}/parcels/my-parcels?type=sent
Authorization: Bearer {{customerToken}}

### 3.3 Get all parcels (Admin only)
GET {{baseUrl}}/parcels
Authorization: Bearer {{adminToken}}

### 3.4 Get parcel by tracking number (Public)
GET {{baseUrl}}/parcels/tracking/TRK123456789

### ========================================
### STEP 4: DRIVER MANAGEMENT TESTING
### ========================================

### 4.1 Update driver location
PATCH {{baseUrl}}/drivers/driver-id-here/location
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
  "currentLat": 40.7128,
  "currentLng": -74.0060,
  "notes": "At pickup location"
}

### 4.2 Update driver availability
PATCH {{baseUrl}}/drivers/driver-id-here/availability
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
  "isAvailable": true,
  "reason": "Available for deliveries"
}

### 4.3 Get all drivers (Admin only)
GET {{baseUrl}}/drivers
Authorization: Bearer {{adminToken}}

### 4.4 Get driver performance (Admin only)
GET {{baseUrl}}/drivers/driver-id-here/performance
Authorization: Bearer {{adminToken}}

### ========================================
### STEP 5: ADMIN MANAGEMENT TESTING
### ========================================

### 5.1 Get dashboard statistics
GET {{baseUrl}}/admin/dashboard/stats
Authorization: Bearer {{adminToken}}

### 5.2 Get system statistics
GET {{baseUrl}}/admin/dashboard/system-stats
Authorization: Bearer {{adminToken}}

### 5.3 Get all users with filters
GET {{baseUrl}}/admin/users?page=1&limit=10
Authorization: Bearer {{adminToken}}

### 5.4 Get all drivers with filters
GET {{baseUrl}}/admin/drivers?page=1&limit=10&isAvailable=true
Authorization: Bearer {{adminToken}}

### 5.5 Get driver applications
GET {{baseUrl}}/admin/driver-applications?status=PENDING
Authorization: Bearer {{adminToken}}

### 5.6 Get all parcels with filters
GET {{baseUrl}}/admin/parcels?page=1&limit=10&status=pending
Authorization: Bearer {{adminToken}}

### ========================================
### STEP 6: PARCEL ASSIGNMENT TESTING
### ========================================

### 6.1 Assign parcel to driver (Admin)
POST {{baseUrl}}/admin/parcels/assign
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "parcelId": "parcel-id-here",
  "driverId": "driver-id-here",
  "reason": "Driver assigned based on proximity"
}

### 6.2 Get assigned parcels (Driver)
GET {{baseUrl}}/parcels/assigned
Authorization: Bearer {{driverToken}}

### 6.3 Update parcel status (Driver)
PATCH {{baseUrl}}/parcels/parcel-id-here/status
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
  "status": "picked_up",
  "notes": "Parcel picked up successfully"
}

### ========================================
### STEP 7: REVIEW SYSTEM TESTING
### ========================================

### 7.1 Create a review for a driver (Customer)
POST {{baseUrl}}/reviews
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
  "driverId": "driver-id-here",
  "parcelId": "parcel-id-here",
  "rating": 5,
  "comment": "Excellent service! Very professional.",
  "deliveryExperience": "EXCELLENT"
}

### 7.2 Get all reviews (Admin)
GET {{baseUrl}}/reviews
Authorization: Bearer {{adminToken}}

### 7.3 Get reviews by driver
GET {{baseUrl}}/reviews/driver/driver-id-here
Authorization: Bearer {{adminToken}}

### ========================================
### STEP 8: ERROR TESTING
### ========================================

### 8.1 Try to access admin endpoint as customer (Should fail)
GET {{baseUrl}}/admin/dashboard/stats
Authorization: Bearer {{customerToken}}

### 8.2 Try to access driver endpoint as customer (Should fail)
GET {{baseUrl}}/parcels/assigned
Authorization: Bearer {{customerToken}}

### 8.3 Try to access protected endpoint without token (Should fail)
GET {{baseUrl}}/users/profile/me

### 8.4 Try to update another user's profile (Should fail)
PATCH {{baseUrl}}/users/different-user-id
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
  "name": "Unauthorized Update"
}

### ========================================
### STEP 9: CLEANUP (Optional)
### ========================================

### 9.1 Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{customerToken}}

### 9.2 Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{driverToken}}

### 9.3 Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{adminToken}} 